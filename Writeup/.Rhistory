# start with functions for the learning model (at equilibrium)
indalarm = function(a, p, d){
return(a*p*d)
}
indnoalarm = function(a, p, d){
return((1-a)*p*d)
}
socalarm = function(a, p, d, s){
return(a*p*d*(1+p*(1-d)*(1-s)*a)/(1-p*(1-d)*a*s))
}
socnoalarm = function(a, p, d, s){
return((1-a)*p*d*(1+(1-p+p*(1-d)*(1-a))*(1-s))/(1-(1-p+p*(1-d)*(1-a))*s))
}
results = data.frame(a=double(), p=double(), d=double(), s=double(), ialarm=double(), inoalarm=double(),
salarm=double(), snoalarm=double())
for(a in seq(0, 1, .1)){
for(p in seq(0, 1, .1)){
for(d in seq(0, 1, .1)){
for(s in seq(0, 1, .1)){
results[nrow(results)+1, ] = c(a,p,d,s,b,c,fitness(a,p,d,b,c),indalarm(a,p,d),indnoalarm(a,p,d),
fitness(a,p,d,b,c,s=s),socalarm(a,p,d,s),socnoalarm(a,p,d,s))
}
}
}
}
results = data.frame(a=double(), p=double(), d=double(), s=double(), ialarm=double(), inoalarm=double(),
salarm=double(), snoalarm=double())
for(a in seq(0, 1, .1)){
for(p in seq(0, 1, .1)){
for(d in seq(0, 1, .1)){
for(s in seq(0, 1, .1)){
results[nrow(results)+1, ] = c(a,p,d,s,indalarm(a,p,d),indnoalarm(a,p,d),
socalarm(a,p,d,s),socnoalarm(a,p,d,s))
}
}
}
}
testparams = c("a", "p", "d", "s")
plotr = gather(results, type, value, c("salarm", "ialarm", "snoalarm", "inoalarm"))
for(param in testparams){
plotr$param = plotr[,param]
pltr = summarize(group_by(plotr, param, type), N = length(value), mean = mean(value, na.rm = T),
sd = sd(value, na.rm = T), se = sd / sqrt(N))
plot = ggplot(pltr, aes(x = param, y = mean, color = type)) + geom_line() + xlab(param)
ggsave(paste(param, "learning.png"))
}
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
testparams = c("a", "p", "d", "s")
plotr = gather(results, type, value, c("salarm", "ialarm", "snoalarm", "inoalarm"))
for(param in testparams){
plotr$param = plotr[,param]
pltr = summarize(group_by(plotr, param, type), N = length(value), mean = mean(value, na.rm = T),
sd = sd(value, na.rm = T), se = sd / sqrt(N))
plot = ggplot(pltr, aes(x = param, y = mean, color = type)) + geom_line() + xlab(param)
ggsave(paste(param, "learning.png"))
}
getwd()
flandscape = data.frame(a=double(), p=double(), alarm=double(), noalarm=double(), b=double(), c=double(), fitness=double())
for(a in seq(0, 1, .2)){
for(p in seq(0, 1, .2)){
for(alarm in seq(0, 1, .2)){
for(noalarm in seq(0, 1, .2)){
for(b in seq(0, 10, 2)){
for(c in seq(0, 10, 2)){
fitness = a*p*(1-alarm)*(b-c)+((1-a)*p*(b-c)+(1-p)*b)*(1-noalarm)
results[nrow(results)+1, ] = c(a,p,alarm,noalarm,b,c,fitness)
}
}
}
}
}
}
flandscape = data.frame(a=double(), p=double(), alarm=double(), noalarm=double(), b=double(), c=double(), fitness=double())
for(a in seq(0, 1, .2)){
for(p in seq(0, 1, .2)){
for(alarm in seq(0, 1, .2)){
for(noalarm in seq(0, 1, .2)){
for(b in seq(0, 10, 2)){
for(c in seq(0, 10, 2)){
fitness = a*p*(1-alarm)*(b-c)+((1-a)*p*(b-c)+(1-p)*b)*(1-noalarm)
flandscape[nrow(results)+1, ] = c(a,p,alarm,noalarm,b,c,fitness)
}
}
}
}
}
}
